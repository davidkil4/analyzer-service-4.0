import os
import sys
import subprocess
import logging
from pathlib import Path

# Add the project root to the Python path to allow importing analyzer_service
project_root = Path(__file__).parent.resolve()
sys.path.insert(0, str(project_root))

from analyzer_service.clustering_analysis.ZPD_analyzer import CAFClusterAnalyzer

# --- Configuration ---
INPUT_JSON = "scoring_output.json" # Input file generated by the analysis pipeline
OUTPUT_DIR = "clustering_output" # Directory to store clustering results
OUTPUT_BASE_NAME = "test_run" # Base name for output files

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- Helper Function ---
def run_script(script_path, args):
    """Runs a Python script as a subprocess."""
    command = [sys.executable, script_path] + args
    logger.info(f"Running command: {' '.join(command)}")
    try:
        result = subprocess.run(command, check=True, capture_output=True, text=True, cwd=project_root)
        logger.info(f"Script {script_path} completed successfully.")
        logger.debug(f"Stdout:\n{result.stdout}")
        if result.stderr:
            logger.warning(f"Stderr:\n{result.stderr}")
    except subprocess.CalledProcessError as e:
        logger.error(f"Error running script {script_path}:")
        logger.error(f"Return code: {e.returncode}")
        logger.error(f"Stdout:\n{e.stdout}")
        logger.error(f"Stderr:\n{e.stderr}")
        raise
    except FileNotFoundError:
        logger.error(f"Error: Script not found at {script_path}")
        raise

# --- Main Execution ---
def main():
    # Ensure input file exists
    input_path = project_root / INPUT_JSON
    if not input_path.is_file():
        logger.error(f"Input file not found: {input_path}")
        sys.exit(1)

    # Create output directory
    output_dir_path = project_root / OUTPUT_DIR
    output_dir_path.mkdir(parents=True, exist_ok=True)
    logger.info(f"Output directory: {output_dir_path}")

    # Define output file paths
    output_base = output_dir_path / OUTPUT_BASE_NAME
    primary_output_path = f"{output_base}_primary.json"
    state_output_path = f"{output_base}_state.json"
    secondary_txt_path = f"{output_base}_secondary.txt"
    secondary_json_path = f"{output_base}_secondary.json"
    prioritized_json_path = f"{output_base}_secondary_prioritized.json"

    # --- Step 1: ZPD Analyzer (Primary Clustering) ---
    logger.info("--- Running Step 1: ZPD Analyzer (Primary Clustering) ---")
    try:
        analyzer = CAFClusterAnalyzer(str(input_path))
        logger.info("Extracting features...")
        analyzer.extract_features()
        if analyzer.features is None or len(analyzer.features) == 0:
            logger.error("Feature extraction failed or resulted in no features. Aborting.")
            sys.exit(1)
        logger.info("Performing clustering...")
        analyzer.perform_clustering()
        logger.info("Determining tendency zone...")
        analyzer.determine_tendency_zone()
        logger.info(f"Generating primary analysis report: {primary_output_path}")
        analyzer.generate_cluster_analysis(primary_output_path)
        logger.info(f"Saving clustering state: {state_output_path}")
        analyzer.save_state(state_output_path)
        logger.info("Step 1 completed successfully.")
    except Exception as e:
        logger.error(f"Error during Step 1 (ZPD Analyzer): {e}", exc_info=True)
        sys.exit(1)

    # --- Step 2: ZPD Regions (Secondary Analysis) ---
    logger.info("--- Running Step 2: ZPD Regions (Secondary Analysis) ---")
    regions_script = project_root / "analyzer_service" / "clustering_analysis" / "ZPD_regions.py"
    try:
        run_script(str(regions_script), [primary_output_path, str(output_base)])
        logger.info("Step 2 completed successfully.")
        logger.info(f"Generated: {secondary_txt_path}")
        logger.info(f"Generated: {secondary_json_path}")
    except Exception as e:
        logger.error(f"Error during Step 2 (ZPD Regions): {e}", exc_info=True)
        sys.exit(1)

    # --- Step 3: ZPD Priority (Prioritization) ---
    logger.info("--- Running Step 3: ZPD Priority (Prioritization) ---")
    priority_script = project_root / "analyzer_service" / "clustering_analysis" / "ZPD_priority.py"
    try:
        run_script(str(priority_script), [secondary_json_path])
        logger.info("Step 3 completed successfully.")
        logger.info(f"Generated: {prioritized_json_path}")
    except Exception as e:
        logger.error(f"Error during Step 3 (ZPD Priority): {e}", exc_info=True)
        sys.exit(1)

    logger.info("--- Clustering Analysis Pipeline Test Completed Successfully! ---")

if __name__ == "__main__":
    main()
